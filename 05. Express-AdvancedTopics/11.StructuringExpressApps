Structuring Express Applications/ Building Maintainable Routes
    We don't want to code all in our index.js; we want to structuring propertly our app

    Steps to creating Router Module:
     - Take out all the code about each APIendpoints and put it in a separate file(module)
       e.g All Routes about courses should be in courses.js
           All Routes about authors should be in authors.js
     - For each separate module we have to:
       - Load express module using require() functions just like always
       - We don't use 'app' object for each separate module; because we're separating the Routes in different modules 
         so we use a Router:
         - express.Router() => This returns a 'router' object. So we work with 'router' instead 'app' object
     - Finally we export the 'router' object at the end of the module:
        module.exports = router
    
    Loading/Using a Router Module:
     - Now we load the modules inside the index.js module using require() function
     - Then we call app.use() function:
       - path: The path of the API e.g '/api/courses'
       - router: The router object we imported with require() e.g courses
       All this means that we're telling Express that for any routes that start with the defined 'path' we use 
       the router object we passed!
       And with this we change the modules(routes) to make them shorter:
        e.g router.get('/api/courses', (req,res) .... => change to => router.get('/', (req,res) 
    
    Structuring Middleware Functions:
     - We may can have multiple custom Middlewares Functions e.g Logger.js; So is better to put all them in a folder

    e.x Create two modules for:
        - courses APIendpoin
        - homepage APIendpoin
    


-- routes/home.js 
const express = require('express');
const router = express.Router();

router.get('/', (req,res) => {
    res.render('index', {title: 'My Express App', message: 'Hello'});
    
});


module.exports = router;



-- routes/courses.js

const express = require('express');
const router = express.Router();
// const app = express(); 


const courses = [
    { id: 1, name:'course1'},
    { id: 2, name:'course2'},
    { id: 3, name:'course3'}
];



router.get('/', (req,res) =>{
    res.send(courses);
});

router.get('/:id', (req,res) => {

    const course = courses.find( c => c.id === parseInt(req.params.id) );
    if(!course) return res.status(404).send('The course with the given ID was not found');
    
    res.send(course);
});


router.post('/', (req,res) => {

    const { error } = validateCourse(req.body);
    if(error) return res.status(400).send(error.details[0].message);

    const course = {
        id: courses.length + 1,
        name: req.body.name
    }

    courses.push(course);
    res.send(course);

} );


router.put('/:id', (req,res) => {

    const course = courses.find( c => c.id === parseInt(req.params.id) );
    if(!course) return res.status(404).send('The course with the given ID was not found');
    
    const { error } = validateCourse(req.body);
    if(error) return res.status(400).send(error.details[0].message);

   course.name = req.body.name;
   res.send(course);

})



router.delete('/:id', (req,res) => {
    const course = courses.find( c => c.id === parseInt(req.params.id) );
    if(!course) return res.status(404).send('The course with the given ID was not found');
    

    const index = courses.indexOf(course);
    courses.splice(index, 1);

    res.send(course);

});


function validateCourse(course){
    const schema = Joi.object({
        name: Joi.string().min(3).required()
    });

    return schema.validate(course);
    
}

module.exports = router;


-- index.js
const startupDebugger = require('debug')('app:startup');
const dbDebugger = require('debug')('app:db');
const config = require('config');
const morgan = require('morgan');
const helmet = require('helmet');
const Joi = require('joi');
const logger = require('./middleware/logger');
const courses = require('./routes/courses');
const homePage = require('./routes/home');
const express = require('express');
const app = express(); 


app.set('view engine', 'pug');
app.set('views', './views');

app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(express.static('public'));
app.use(helmet());
app.use('/api/courses', courses);
app.use('/', homePage);

console.log(`Application Name: ` + config.get('name'));
console.log(`Mail Server: ` + config.get('mail.host'));
console.log(`Mail Password: `+ config.get('mail.password'));

if(app.get('env') === 'development'){
    app.use(morgan('tiny'));
    startupDebugger('Morgan enabled...');
}

dbDebugger('Connected to the database...');

app.use(logger);


const port = process.env.PORT || 3000;
app.listen(port, ()=>{
    console.log(`Listening on port ${port}...`);
});




