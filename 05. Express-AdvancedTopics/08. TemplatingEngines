Templating Engines
    In all the endpoints we have implemented we returned JSON objects in the response to the client; but sometime we 
    need HTML markup to the client

    There're various Templating Engines available for Express apps:
     - Pug: The most popular one
     - Mustache
     - EJS
    Each Template Engine has different syntax for generating dynamic HTML and return it to the client


    Install Pug:
     - npm i pug

    Set View Engine for the app:
     - we use app.set(propertyName, templateEngine):
       - propertyName: The name of the property we need to set
       - templateEngine: The name of our View Engine/Template Engine
       e.g app.set('view engine', 'pug')
       So express will internally:
       - Load the 'pug' module => We dont need to use require() function
     - There's another setting that is not compulsory(is just optional):
       - We want to override the 'path' of our templates:
         app.set(propertyName, pathStoreTemplate)
        - propertyName: The name of the property we need to set
        - pathStoreTemplate: The path of our templates; the default value is './views'
                             This means a folder 'views' in the root of the app; and we can remove this line if we 
                             like the default value!
    
    Define the template in file.pug
     - We create a folder views/ and inside that we can add a index.pug file to add the template
     - The syntax in pug is very clean instead of normal HTML markup
       -html: Define an HTML element
       -head: head of the HTML
       -title: title element
       -body: define the body
       -h1: define a header h1

      We can set the value of the element/s dynamically just set these to the name of the variable we want to set in 
      runtime! 
        e.g title= title
            h1= message
    
    
    render() instead of send():
     - We use res.render() to display HTML markup in runtime to the client:
       this functions takes:
        - name of our view: This is the name of our file .pug  e.g 'index'
        - object: We pass an object that includes all the values for the parameters we defined in the template .pug
                  and we want to render dynamically. So in this object:
                  - key: name of the variable passed to our template
                  - value:  the value we want to set to that variable 

         e.g   res.render('index', {title: 'My Express App', message: 'Hello'});

-- views/index.pug

html
    head
        title= title
    body
        h1= message

-- index.js
const startupDebugger = require('debug')('app:startup');
const dbDebugger = require('debug')('app:db');
const config = require('config');
const morgan = require('morgan');
const helmet = require('helmet');
const Joi = require('joi');
const logger = require('./logger');
const express = require('express');
const app = express(); 


app.set('view engine', 'pug');
app.set('views', './views');

app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(express.static('public'));
app.use(helmet());

console.log(`Application Name: ` + config.get('name'));
console.log(`Mail Server: ` + config.get('mail.host'));
console.log(`Mail Password: `+ config.get('mail.password'));

if(app.get('env') === 'development'){
    app.use(morgan('tiny'));
    // console.log('Morgan enabled...');
    startupDebugger('Morgan enabled...');
}

dbDebugger('Connected to the database...');

app.use(logger);


const courses = [
    { id: 1, name:'course1'},
    { id: 2, name:'course2'},
    { id: 3, name:'course3'}
];

app.get('/', (req,res) => {
    // res.send('Hello World');
    res.render('index', {title: 'My Express App', message: 'Hello'});
    
});






-- Browser in http://localhost:3000  (in tab up=> My Express App)
Hello