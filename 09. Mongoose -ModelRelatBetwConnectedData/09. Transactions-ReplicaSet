MongoDB in production
    If we want to use MongoDB in production we need to set up MongoDB Replica Sets

    Replica Sets:
     - Consist on several MongoDB servers and they have never seen production database that consist just of
       one server.
     - In each Replica Set there's only one Primary Server and all others are Secondary Servers
       But we can make changes only on the Primary Server:
       - If we update any Document on the Primary Server, the update is automatically propagated to all 
         Secondary servers. In other words is Replicated from Primary to => Secondary
     - If Primary Server fails then Secondary Servers will elect new Primary Server and one of the Secondary
       Server will become Primary
    
    Write Operation:
     - If we want to perform write operation we must fo it on the Primary Server
    
    Read Operations:
     - If we wanto to read data from the database e.g aggregation requests, find query...
       we can read from any of the servers: Either from Primary or from Secondary
    

    Cluster:
     - We have our Cluster in MongoDB Atlas, a cluster consists of:
       - Different servers: Primary, Secondary, Secondary, ...
                            These 3 servers combined is a Replica Set!


    Convert to a ReplicaSet => http://thecodebarbarian.com/introducing-run-rs-zero-config-mongodb-runner.html
        We have run MongoDB locally so our server is Cluster Standalone and is not Replica Set. 
        We use a package to to run a MongoDB replica set locally for development and clear the database each 
        time:
        - run-rs package
          npm install run-rs -g
        - Now we will have a replica set running MongoDB locally. 
        - Run rs.status() to verify the replica set is running. Then, we can execute a transaction from :
          - the MongoDB shell - mongosh
          - using 'mongod' package in node.js
          - using 'mongoose' package in node.js

    Transaction in mongoose:
     - Where we want to use the transaction:
       const session = await mongoose.startSession();
       session.startTransaction();
       try {
            ...
            ...
            await session.commitTransaction();
            session.endSession();
       }
       catch (ex){
        await session.abortTransaction();
        session.endSession();
        console.log(ex);
       }
