Referencing Documents
    Reference a document in another document.     
    Once we have a Document in our Collection; we can:
     - Copy and paste the ObjectId and pass as reference when we save a new Document of a different Collection

    Reference:
     - We need to create a new SchemaType Object to the property where we want to pass the reference
       and set:
       - type: mongoose.Schema.Types.ObjectId,
       - ref: 'nameOfTargetCollection'
    
    Remember that even this looks like a relationship; if we pass invalid ObjectId MongoDB doesn't care about it 
    so we can have inconsistency in our Documents




-- population.js

const mongoose = require('mongoose');

mongoose.connect('mongodb://localhost/playground')
  .then(() => console.log('Connected to MongoDB...'))
  .catch(err => console.error('Could not connect to MongoDB...', err));

const Author = mongoose.model('Author', new mongoose.Schema({
  name: String,
  bio: String,
  website: String
}));

const Course = mongoose.model('Course', new mongoose.Schema({
  name: String,
  author: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Author'
  }

}));

async function createAuthor(name, bio, website) { 
  const author = new Author({
    name, 
    bio, 
    website 
  });

  const result = await author.save();
  console.log(result);
}

async function createCourse(name, author) {
  const course = new Course({
    name, 
    author
  }); 
  
  const result = await course.save();
  console.log(result);
}

async function listCourses() { 
  const courses = await Course
    .find()
    .select('name');
  console.log(courses);
}

// createAuthor('Mosh', 'My bio', 'My Website');

createCourse('Node Course', '62d6a588a4116db1cb290885')

// listCourses();