Project - Build the Movies API
    In our vidly project create an API to manage the list of movies.
    The shape of the movies we want to store in MongoDB:
     - title: String
     - genre: Embedded SubDocument
             -  name: String
     - numberInStock: Number
     - dailyRentalRate: Number

    
    Steps:
     - Create a new model Module movie.js, where we define the Schema shape and the Joi shape.
       - The Schema: we can apply some validation for string and numbers; and also remember to pass 
                     the genreSchema that we want to embedded!
       - Joi validation: This schema is for validate exactly what the Client sends to us. So this schema can 
                         be different from the ModelSchema. 
                         e.g we don't want the client sends the genre itself; instead sends the genreId
    
     - With these two exports; now we create a new Routes movies.js
       - In POST request, we need to:
         - Evaluate the body of the client if matches with joi validation
         - Evaluate the existence of the genre given by the genreId passed from the client in request body
         - reate a new instance of the ModelSchema, and here even we can select:
           - Properties what we want to include in this Embedded Document, because maybe this Child Document can have 
                        many properties
                        Also we don't want to pass the '__v' property which is defined by MongoDB
         - Finally save() the Document to the database
       - In PUT request, we need to:
         - Evaluate the body of the client if matches with joi validation
         - Evaluate the existence of the genre given by the genreId passed from the client in request body
         - Find the movie by the movieId passed in the RouteParam and update using $set operator inside the findOneAndUpdate method

       - In GET/DELETE Requests:
         - Here is just to Get the movies or a single movie by the Id passed in RouteParam
         - And to remove is jut a single movie by the Id passed in RouteParam
           So these two kind of requests are just for Get or Delete the complete Movie Document just like a normal Document!



-- routes/movies.js

const { Movie, validate } = require('../models/movie');
const { Genre } = require('../models/genre');
const express = require('express');
const router = express.Router();


router.get('/', async (req,res) => {
    const movies = await Movie.find().sort('title');
    res.send(movies);
    
});

router.get('/:id', async (req, res) => {
    const movie = await Movie.findById(req.params.id);
    if (!movie) return res.status(404).send('The movie with the given ID was not found')

    res.send(movie);

});
router.post('/', async (req,res) => {

    const { error } = validate(req.body);
    if(error) return res.status(400).send(error.details[0].message);

    const genre = await Genre.findById(req.body.genreId);
    if (!genre) return res.status(404).send('The genre with the given ID was not found');

    let movie = new Movie ({
        title: req.body.title,
        genre: {
            _id: genre._id,
            name: genre.name
        },
        numberInStock: req.body.numberInStock,
        dailyRentalRate: req.body.dailyRentalRate
    });

    try{
        movie = await movie.save();
        res.send(movie);
        }

    catch(ex){
        console.log(ex.message);

    }

});

router.put('/:id', async (req, res) => {
    const { error } = validate(req.body);
    if(error) return res.status(400).send(error.details[0].message);

    const genre = await Genre.findById(req.body.genreId);
    if (!genre) return res.status(404).send('The genre with the given ID was not found');

    const movie = await Movie.findOneAndUpdate({_id: req.params.id}, {
        $set: {
            'title': req.body.title,
            'genre.name': genre.name,
            'numberInStock': req.body.numberInStock,
            'dailyRentalRate': req.body.dailyRentalRate 
        }
    }, {new: true})

    if (!movie) return res.status(404).send('The movie with the given ID was not found')
    res.send(movie);

});


router.delete('/:id', async (req, res) => {
    const movie = await Movie.findByIdAndDelete(req.params.id );
    if (!movie) return res.status(404).send('The movie with the given ID was not found')

    res.send(movie);
});


module.exports = router;




-- models/movie.js

const { genreSchema } = require('./genre');
const mongoose = require('mongoose');
const Joi = require('joi');

const Movie = mongoose.model('Movie', new mongoose.Schema({
    title: {
        type: String,
        required: true,
        minlength: 3,
        maxlength: 50
    },
    genre: {
        type: genreSchema,
        required: true
    },
    numberInStock:{
        type: Number,
        required: true,
        defualt: 0,
        min: 0,
        max: 255
    },
    dailyRentalRate:{
        type: Number,
        required: true,
        default: 5,
        min: 0,
        max: 255
    }
}));


function validateMovie(movie){
    const schema = Joi.object({
        title: Joi.string().min(3).max(50).required(),
        genreId: Joi.string().required(),
        numberInStock: Joi.number().min(0).max(255).required(),
        dailyRentalRate: Joi.number().min(0).max(255).required()
    });
    return schema.validate(movie);
}

module.exports.Movie = Movie;
module.exports.validate = validateMovie;
