Handling HTTP DELETE Requests 
    Respond to these kind of Requests using app.delete() method.

    app.delete() method:
     - This methods takes:
       - path: we give the path of the resource with the Route Parameter, because we're working with a specific
               source object.
       - Route Handler:
          - First we need to look up the resource object 
            - If no exists: return 404 Status Code
            - Is exists: Delete the resource object 
          - Finally by convention returns the same resource object

        
    Fixing a Bug:
     - When response the 404 Status Code:
       - We need we can put return keywork in,Â¿:
         - return res.status...
         - or use => return;
    
-- index.js 

const Joi = require('joi');
const express = require('express');
const app = express(); 

app.use(express.json());

const courses = [
    { id: 1, name:'course1'},
    { id: 2, name:'course2'},
    { id: 3, name:'course3'}
];

app.get('/', (req,res) => {
    res.send('Hello World');
});

app.get('/api/courses', (req,res) =>{
    res.send(courses);
});

app.get('/api/courses/:id', (req,res) => {

    const course = courses.find( c => c.id === parseInt(req.params.id) );
    if(!course) return res.status(404).send('The course with the given ID was not found');
    
    res.send(course);
});


app.post('/api/courses', (req,res) => {

    const { error } = validateCourse(req.body);
    if(error) return res.status(400).send(error.details[0].message);

    const course = {
        id: courses.length + 1,
        name: req.body.name
    }

    courses.push(course);
    res.send(course);

} );


app.put('/api/courses/:id', (req,res) => {

    const course = courses.find( c => c.id === parseInt(req.params.id) );
    if(!course) return res.status(404).send('The course with the given ID was not found');
    
    const { error } = validateCourse(req.body);
    if(error) return res.status(400).send(error.details[0].message);

   course.name = req.body.name;
   res.send(course);

})



app.delete('/api/courses/:id', (req,res) => {
    const course = courses.find( c => c.id === parseInt(req.params.id) );
    if(!course) return res.status(404).send('The course with the given ID was not found');
    

    const index = courses.indexOf(course);
    courses.splice(index, 1);

    res.send(course);

});

const port = process.env.PORT || 3000;
app.listen(port, ()=>{
    console.log(`Listening on port ${port}...`);
});


function validateCourse(course){
    const schema = Joi.object({
        name: Joi.string().min(3).required()
    });

    return schema.validate(course);
    
}




