Handling PUT Requests 
    To update a resource using express().put() method

    - Put method:
      - This method takes:
        - path: this path to the corresponding resource, but it needs a Route Parameter because we're dealing 
                with a specific object of the resource.
                e.g '/api/courses/:id'
        - Route HandlerFunc: We need to implement a logic to :
                            - look for the specific object in the resource 
                              - If this specific object doesn't exist, return 404 => Resource Not Found
                              - If this specific object exists:
                                - validate the specific object(is in good shape)
                                  - If is invalid => return 400 Bad Request
                                - Update the specific object resource and Return updated object to client!!
    

    - Extract duplicated logic:
      - We have duplicated logic in:
        - app.put()
        - app.post()
        when we validate the input body of the request sent by the client. So we can put in a separate function
        that we can use in various Route Handlers
      - Call => function validateResourceName(){  Validation Logic... }

    - Cleaner code:
      - To make the code cleaner and shorter we can use:
        - Object Destructuring Feature in modern JavaScript
          - When declaring a variable/constant we add {} and then we add the property of the target 
            object:
                  const { property } = object; 
              e.g const { error } = validateCourse(req.body)   => equivalent to =>  result.error




-- index.js 

const Joi = require('joi');
const express = require('express');
const app = express(); 

app.use(express.json());

const courses = [
    { id: 1, name:'course1'},
    { id: 2, name:'course2'},
    { id: 3, name:'course3'}
];

app.get('/', (req,res) => {
    res.send('Hello World');
});

app.get('/api/courses', (req,res) =>{
    res.send(courses);
});

app.get('/api/courses/:id', (req,res) => {

    const course = courses.find( c => c.id === parseInt(req.params.id) );
    if(!course) res.status(404).send('The course with the given ID was not found');
    
    res.send(course);


});


app.post('/api/courses', (req,res) => {

    
    // const result = validateCourse(req.body);
    const { error } = validateCourse(req.body);
    if(error){
        res.status(400).send(error.details[0].message);
        return;
    }


    const course = {
        id: courses.length + 1,
        name: req.body.name
    }

    courses.push(course);
    res.send(course);

} );


app.put('/api/courses/:id', (req,res) => {

    const course = courses.find( c => c.id === parseInt(req.params.id) );
    if(!course) res.status(404).send('The course with the given ID was not found');

    // const result = validateCourse(req.body);
    const { error } = validateCourse(req.body);
    if(error){
        res.status(400).send(error.details[0].message);
        return;
    }

   course.name = req.body.name;
   res.send(course);

})


const port = process.env.PORT || 3000;
app.listen(port, ()=>{
    console.log(`Listening on port ${port}...`);
});


function validateCourse(course){
    const schema = Joi.object({
        name: Joi.string().min(3).required()
    });

    return schema.validate(course);
    
}




