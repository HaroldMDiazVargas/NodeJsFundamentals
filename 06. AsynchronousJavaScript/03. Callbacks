Callbacks 

    - Make a change in the signature of the function; adding a new parameter:
      - callback: Is a function that we're going to call when the result of an Asynchronous operation is ready
                  so we're going to call this function back when the result is ready; and we pass:
                  - the result object => callback({...})
    
    Now in the main code; when we're calling the function:
    - we are not going to expect nothing, that means the function is not going to return anything
    - we pass a second argument: function that will be called
                                 this function will takes an argument:
                                   - object we defined in the callback({}) call inside the function definition!
                                     but is not the object exactly, is just a name of the object e.g user, course, so on
                                 in the code block:
                                   - we can access to the object that we have read from the database
                                 
    -- Exercise. Once we read a user from the database; then we looking for the gitHubUsername property returned
                 and then call githubAPI to get=> list of repositories for the user!


-- index.js

console.log('Before');
getUser(1, (user) => {
    console.log(user);

    getRepositories(user.gitHubUsername, (repos)=>{
        console.log(repos);
    })

});

console.log('After');



function getUser(id, callback){
    setTimeout( () => {
        console.log('Reading a user from a database...');
        callback({id: id, gitHubUsername: "Harold"});
    }, 2000);   
}


function getRepositories(username, callback){
    setTimeout( () => {
        console.log('Calling GitHub API..');
        callback(['repo1', 'repo2', 'repo3']);
    }, 2000);
}




-- terminal

‚ùØ node .\index.js
Before
After
Reading a user from a database...
{ id: 1, gitHubUsername: 'Harold' }
Calling GitHub API..
[ 'repo1', 'repo2', 'repo3' ]