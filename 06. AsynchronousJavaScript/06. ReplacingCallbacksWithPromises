Replacing Callbacks with Promises
    Anywhere we have an Asynchronous function that takes a 'callback' we should modify that function to return a promise.
    So in order to resolve Callback Hell problem; we should modify our Asynchronous functions to return a promise

    Replacing:
     - we return a new instance of the Promise; and to the body of the arrow function we pass:
       - all the asynhronous work; in this case the setTimeout() function. When this asynhronous operations ends; 
         it will call the body where we display something and also:
          - we  use=> resolve() instead callback(). To send the result to the consumer
    
    So now we are returning:
     - Promises objects for each callback function. And these function don't take anymore 'callback' as second argument




-- index.js 

console.log('Before');
getUser(1, (user) => {
console.log(user);

getRepositories(user.gitHubUsername, (repos)=>{
    console.log(repos);


    getCommits(repos[0], (commits) => {
        console.log(commits);
    })
})

});

console.log('After');




function getUser(id){
return new Promise((resolve, reject) => {
    // Kick off some async work
    setTimeout( () => {
        console.log('Reading a user from a database...');
        resolve({id: id, gitHubUsername: "Harold"});
    }, 2000);   
});

}


function getRepositories(username){
return new Promise((resolve, reject) => {
    setTimeout( () => {
        console.log('Calling GitHub API..');
        resolve(['repo1', 'repo2', 'repo3']);
    }, 2000);
});
}

function getCommits(repo){
return new Promise((resolve, reject) => {
    setTimeout( () =>{
        console.log('Calling GitHub API...')
        resolve(['commit']);
    },2000 );
})
}