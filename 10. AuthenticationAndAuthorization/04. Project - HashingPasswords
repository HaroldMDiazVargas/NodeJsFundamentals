Vidly Project - Hashing Passwords
    To hash passwords we use a popular library called bcrypt

    Bcrypt library:
     - Install => npm i bcrypt
     - Load => const bcrypt = require('bcrypt')

    What is a salt:
     - To hash a password we need a salt
     - salt: is a random string that is added before or after the password. So the result hash password will be different 
             everytime based on the random string. This is used because even if the hash password can't come back to 
             the original password, if we don't use the random string a hacker can play with different passwords until
             get the hash password that matches!
    
    Generating a salt:
     - So the bcrypt object has two methods for generate a salt:
       - genSalt: Asynchronous
       - genSaltSync: Synchronous
         These methos takes:
          - Rounds: Number of rounds we want to run this algorithm to generate the salt
                    The higher is the number the longer is going to take to generate the salt, and also the salt 
                    will be more complex and hard to break.
                    Default value is 10!
          - callback: This is if we want to use callback approach for Async operation, but there's an override of this 
                      method that returns Promise. So we can use 'await' operator!
    
    Hashing the password:
     - The bcrypt object has another methods for hashing the password:
       - hashSync
       - hash
        These methods takes:
         - Data: our string data password
         - Salt: 
         - callback: If we want to use callback approach, but here we use 'await' operator
     
     - Result:
       - We will see that the Salt is included at the begining of the Hash Password. This is because later when we want to 
         Authenticate the user:
          - we validate the username and password sent in plain text
            So we Hash the password again but we need to know the original Salt that was used to generate the Hash.
       - During compare the Hash Password with the plain text password, bcrypt needs to know the original Salt that 
         was used to Hash this password!
       - Because everytime we run a Salt we will get a different salt, so is compulsory to know the original Salt to 
         Authenticate!
    


-- routes/users.js
const bcrypt = require('bcrypt');
const _ = require('lodash');
const { User, validate } = require('../models/user');
const express = require('express');
const router = express.Router();
const mongoose = require('mongoose');


router.post('/', async (req,res) => {
    const { error } = validate(req.body);
    if(error) return res.status(400).send(error.details[0].message);

    let user = await User.findOne({ email: req.body.email  });
    if (user) return res.status(400).send('User already registered');

    user = new User (_.pick(req.body, ['name', 'email', 'password']));

    const salt = await bcrypt.genSalt(10);  
    user.password = await bcrypt.hash(user.password, salt);


    await user.save();

    res.send(_.pick( user, ['_id', 'name', 'email']));
        
});

module.exports = router;


-- In the Users collection:
{
  "_id": {
    "$oid": "62d97be62aad7f4d73262f9c"
  },
  "name": "Harold",
  "email": "aa123@hotmail.com",
  "password": "$2b$10$Re15k/SlU/tuXx56W.OOTeQ/CA3gSBNJi56rTq4Pk/rhTLS4p/YXW",
  "__v": 0
}
