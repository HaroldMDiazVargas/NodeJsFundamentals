Project - Build the Customers API
    Build an endpoint to manage the customers. The shape of the customer Object has:
     - isGold: boolean
     - name: String
     - phone: String
    




-- customer.js

const mongoose = require('mongoose');
const express = require('express');
const router = express.Router();
const Joi = require('joi');

const Customer = mongoose.model('Customer', new mongoose.Schema({
    isGold: {
        type: Boolean,
        default: false
    },
    name: {
        type: String,
        required: true,
        min: 3,
        max: 50
    },
    phone: {
        type: String,
        required: true,
        min: 3,
        max: 50
    }
}));



router.get('/', async (req,res) => {
    const customers = await Customer.find().sort('name');
    res.send(customers);
    
});

router.get('/:id', async (req, res) => {
    const customer = await Customer.findById(req.params.id);
    if (!customer) return res.status(404).send('The genre with the given ID was not found')

    res.send(customer);

});
router.post('/', async (req,res) => {
    
    const { error } = validateCustomer(req.body);
    if(error) return res.status(400).send(error.details[0].message);

    let customer = new Customer ({
        isGold: req.body.isGold,
        name: req.body.name,
        phone: req.body.phone
    });

    try{
        customer = await customer.save();
        res.send(customer);
        }

    catch(ex){
        console.log(ex.message);

    }

});

router.put('/:id', async (req, res) => {

    
    const { error } = validateCustomer(req.body);
    if(error) return res.status(400).send(error.details[0].message);

    const customer = await Customer.findByIdAndUpdate(req.params.id, req.body,
         {
        new: true
    });

    if (!customer) return res.status(404).send('The customer with the given ID was not found')

    res.send(customer);

});


router.delete('/:id', async (req, res) => {
    const customer = await Customer.findByIdAndDelete(req.params.id );
    if (!customer) return res.status(404).send('The customer with the given ID was not found')

    res.send(customer);
});

function validateCustomer(customer){
    const schema = Joi.object({
        isGold: Joi.boolean(),
        name: Joi.string().min(3).max(50).required(),
        phone: Joi.string().min(3).max(50).required(),

    });
    
    return schema.validate(customer);

}

module.exports = router;