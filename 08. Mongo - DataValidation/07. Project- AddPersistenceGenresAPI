Project - Add Persistence to Genres API
    - In index.js we connect with the database
    - In the genres module where is all routes about genres APIendpoint:
      - Get the Genre class becomes from Schema and the model. Remember make validation
      - With this class we work trough all the Handler Routers and use:
        - Query
        - Update
        - Delete 
    




-- genres.js

const mongoose = require('mongoose');
const express = require('express');
const router = express.Router();
const Joi = require('joi');

const Genre = mongoose.model('Genre', new mongoose.Schema({
    name: {
        type: String,
        required: true,
        min: 5,
        max: 50
    }
}));


router.get('/', async (req,res) => {
    const genres = await Genre.find().sort('name');
    res.send(genres);
    
});

router.get('/:id', async (req, res) => {
    const genre = await Genre.findById(req.params.id);
    if (!genre) return res.status(404).send('The genre with the given ID was not found')
    res.send(genre);

});
router.post('/', async (req,res) => {
    
    const { error } = validateGenre(req.body);
    if(error) return res.status(400).send(error.details[0].message);

    
    let genre = new Genre ({
        name: req.body.name
    });

    try{
        genre = await genre.save();
        res.send(genre);
        }

    catch(ex){
        console.log(ex.message);
    }
});

router.put('/:id', async (req, res) => {

    
    const { error } = validateGenre(req.body);
    if(error) return res.status(400).send(error.details[0].message);

    const genre = await Genre.findByIdAndUpdate(req.params.id, req.body,
         {
        new: true
    });

    if (!genre) return res.status(404).send('The genre with the given ID was not found')
    res.send(genre);
});


router.delete('/:id', async (req, res) => {
    const genre = await Genre.findByIdAndDelete(req.params.id );
    
    if (!genre) return res.status(404).send('The genre with the given ID was not found')
    res.send(genre);
});

function validateGenre(genre){
    const schema = Joi.object({
        name: Joi.string().min(5).max(50).required()
    });
    return schema.validate(genre);
}

module.exports = router;